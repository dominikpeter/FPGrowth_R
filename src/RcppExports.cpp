// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// FPGrowth_
RcppExport SEXP FPGrowth_(List l, double minimum_support);
RcppExport SEXP _FPGrowth_FPGrowth_(SEXP lSEXP, SEXP minimum_supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type minimum_support(minimum_supportSEXP);
    rcpp_result_gen = Rcpp::wrap(FPGrowth_(l, minimum_support));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _FPGrowth_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FPGrowth_FPGrowth_", (DL_FUNC) &_FPGrowth_FPGrowth_, 2},
    {"_FPGrowth_rcpp_hello", (DL_FUNC) &_FPGrowth_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_FPGrowth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
